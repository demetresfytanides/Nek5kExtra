c- CASE PARAMETERS------------------------------------------------------

#define INTP_NMAX 4000
#define LPART INTP_NMAX /* max number of particles per MPI rank */
c-----------------------------------------------------------------------

      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      real visc_inf
      save visc_inf
      data visc_inf /0/
      integer e,f,eg
      e = gllel(eg)

      udiff =0
      utrans=0

      return
      end
c-----------------------------------------------------------------------
      subroutine set_prof
      include 'SIZE'
      include 'TOTAL'
      common /uprof/ up(lx1,ly1,lz1,lelv)
      integer icalld
      save    icalld
      data    icalld  /0/
      if (icalld.ne.0) return
      icalld = icalld + 1
c     Compute the Blasius profile
      u0   = 1.0
      visc =param(2)

c     delta=param(71)
c     if (delta.eq.0.0) DELTA= 0.58

      rad   = 0.5
      delta = 1.2*rad  ! Thorsten

      re = 1./visc
      hk = 0.55
      uk = blasius_sin(hk,delta,u0)
      rk = uk*hk/visc
      write(6,1) nid,delta,re,rk
    1 format(i6,' Delta,Re,Rek:',1p3e15.4)
      ntot=nx1*ny1*nz1*nelv
      do i=1,ntot
        up(i,1,1,1)=blasius_sin(zm1(i,1,1,1),delta,u0)
      enddo
      return
      end
c-----------------------------------------------------------------------
      function blasius(y,delta,u)
c     Return the velocity at a given y value for specified delta and U.
      integer icalld
      save    icalld
      data    icalld /0/
      dimension u0(45),y0(45),work(45)
      save      u0    ,y0    ,work
      data      u0 / 0.00000 , 0.06641 , 0.13277 , 0.19894 , 0.26471
     $             , 0.32979 , 0.39378 , 0.45627 , 0.51676 , 0.57477
     $             , 0.62977 , 0.68132 , 0.72899 , 0.77246 , 0.81152
     $             , 0.84605 , 0.87609 , 0.90177 , 0.92333 , 0.94112
     $             , 0.95552 , 0.96696 , 0.97587 , 0.98269 , 0.98779
     $             , 0.99155 , 0.99425 , 0.99616 , 0.99748 , 0.99838
     $             , 0.99898 , 0.99937 , 0.99961 , 0.99977 , 0.99987
     $             , 0.99992 , 0.99996 , 0.99998 , 0.99999 , 1.00000
     $             , 1.00000 , 1.00000 , 1.00000 , 1.00000 , 1.00000 /
      if (icalld.eq.0) then
c        Initialize Blasius profile and spline fitting routine.
         icalld=1
         do 10 i=1,45
            y0(i)=float(i-1)/5.0
   10    continue
         call spline(y0,u0,45,work)
      endif
      eta=5.0*y/delta
      if (eta.gt.8.5) then
         blasius=u
      else
         call splint(y0,u0,work,45,eta,vel)
         blasius=vel*u
      endif
      return
      end
c-----------------------------------------------------------------------
      function blasius_sin(y,delta,U)

c     Return the velocity at a given y value for specified delta and U.

      real pi,one
      save pi,one
      data pi,one /0.,1./

      if (pi.eq.0) pi=4*atan(one)

      arg = .5*pi*y/delta
      blasius_sin = sin(arg)

      if (arg.gt.0.5*pi) blasius_sin = 1.

      blasius_sin = U*blasius_sin

      return
      end
c-----------------------------------------------------------------------
      subroutine spline(x,y,n,y2)
      parameter (nmax=100)
      dimension x(n),y(n),y2(n),u(nmax)
      if (n.gt.nmax) then
         write(6,11) n,nmax
   11    FORMAT(2X,'ERROR:  Attempt to fit a spline with',I5
     $            ,'greater than',I4,' points.'
     $       ,/,2X,'Recompile routine SPLINE.')
         call exitti('routine spline fail$',n)
      endif
      y2(1)=0.0
      u(1) =0.0
      do 10 i=2,n-1
         ir=i+1
         il=i-1
         sig=(x(i)-x(il))/(x(ir)-x(il))
         p=sig*y2(il)+2.
         y2(i)=(sig-1.)/p
         u(i)= ( 6.*
     $     ( (y(ir)-y(i))/(x(ir)-x(i))-(y(i)-y(il))/ (x(i)-x(il) ) )
     $            / (x(ir)-x(il))
     $    - sig*u(il) )/p
   10 continue
      qn=0.0
      un=0.0
      y2(n)=(un-qn*u(n-1))/(qn*y2(n-1)+1.)
      do 20 k=n-1,1,-1
         y2(k)=y2(k)*y2(k+1)+u(k)
   20 continue
      return
      end
c-----------------------------------------------------------------------
      subroutine splint(xa,ya,y2a,n,x,y)
c     p. 88-89, numerical recipes
      real xa(n),ya(n),y2a(n)
      klo=1
      khi=n
    1   if ((khi-klo).gt.1) then
           k=(khi+klo)/2
           if (xa(k).gt.x) then
              khi=k
           else
              klo=k
           endif
           goto 1
        endif
      h=xa(khi)-xa(klo)
      if (h.eq.0) then
         write(6,*) xa(khi), 'splint failure',khi
         return
      endif
      a=(xa(khi)-x)/h
      b=(x-xa(klo))/h
      y=a*ya(klo)+b*ya(khi)+
     $  ((a**3-a)*y2a(klo)+(b**3-b)*y2a(khi))*(h**2)/6.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,iel)
      include 'SIZE'
      include 'TSTEP'
c     include 'TOTAL'
      include 'NEKUSE'
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,iel)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      qvol   = 0.0
      source = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      common /rparts/ pts(ldim,LPART),vel(ldim,2:3,LPART)
      common /iparts/ npart,partid(LPART)
      integer partid

      ifto = .true.
      if (istep.eq.0.or.mod(istep,iostep).eq.0) 
     $   call lambda2(t)   ! Put lambda2 into temperature field


c     NOTE:  The following outpost call coordinates the .f0000 numbering
c            with the particle file numbering.
c
c            This coordination is important when synching frames for a movie.

      ifto = .true.
      if (istep.eq.0.or.mod(istep,iostep).eq.0) then
        ifxyo = .true.
        if (istep.gt.iostep) ifxyo = .false.
        call vortex_core(t, 'lambda2')
        call outpost(vx,vy,vz,pr, t,'lam')
        call vortex_core(t, 'q')
        call outpost(vx,vy,vz,pr, t,'que')
        call vortex_core(t, 'delta')
        call outpost(vx,vy,vz,pr, t,'del')
        call vortex_core(t, 'swirling')
        call outpost(vx,vy,vz,pr, t,'swi')
        call lambda2(t)   ! Put lambda2 into temperature field
      endif



      ipstep = iostep ! Particle output coordinated with iostep
      ipstep = iostep/4

      ifxyo = .true.
      if (istep.gt.iostep) ifxyo = .false.
      if (istep.eq.0) call outpost(vx,vy,vz,pr,t,'   ') ! Part. coordination
      call my_particle_generator(ipstep)                ! Particle injection

      n=nx1*ny1*nz1*nelt
      umax = glamax(vx,n)
      vmax = glamax(vy,n)
      wmin = glmin(vz,n)
      wmax = glmax(vz,n)
      wmax = glmax(vz,n)
      if (nid.eq.0) write(6,1) istep,time,umax,vmax,wmin,wmax
    1 format(i9,1p5e12.4,' wmax')

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /uprof/ up(lx1,ly1,lz1,lelv)
      integer icalld
      save    icalld
      data    icalld  /0/
      if (icalld.eq.0) call set_prof
      icalld = icalld + 1
      iel = gllel(ieg)
      ux=up(ix,iy,iz,iel)
      uy=0.0
      uz=0.0
      temp=1.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /uprof/ up(lx1,ly1,lz1,lelv)
      integer icalld
      save    icalld
      data    icalld  /0/
      if (icalld.eq.0) call set_prof
      icalld = icalld + 1
      iel = gllel(ieg)
      UX=up(ix,iy,iz,iel)
      UY=0.0
      UZ=0.0
      TEMP=1.0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
c     param(66) = 4
c     param(67) = 4
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      return
      end
c-----------------------------------------------------------------------
      subroutine interp_v(uvw,xyz,n)
c
c     evaluate velocity for list of points xyz
c
      include 'SIZE'
      include 'TOTAL'

      real uvw(ldim,n),xyz(ldim,n)

      real    rwk(INTP_NMAX,ldim+1) ! r, s, t, dist2
      integer iwk(INTP_NMAX,3)      ! code, proc, el
      save    rwk, iwk

      integer intp_h
      save    intp_h

      common /rwk_intp/ 
     $       fwrk(lx1*ly1*lz1*lelt,ldim),
     $       fpts(ldim*INTP_NMAX),
     $       pts(ldim*INTP_NMAX)

      integer icalld,e
      save    icalld
      data    icalld /0/

      nxyz  = nx1*ny1*nz1
      ntot  = nxyz*nelt

      if (n.gt.INTP_NMAX) call exitti ('n > INTP_NMAX in interp_v!$',n)
      
      if (nelgt.ne.nelgv) call exitti
     $   ('nelgt.ne.nelgv not yet supported in interp_v!$',nelgv)

      do i=1,n				! ? not moving -> save?
         pts(i)     = xyz(1,i)
         pts(i + n) = xyz(2,i)
         if (if3d) pts(i + n*2) = xyz(3,i)
      enddo

      if (icalld.eq.0) then
        icalld = 1
        call interp_setup(intp_h,0.0,0,nelt)
      endif

      ! pack working array
      call opcopy(fwrk(1,1),fwrk(1,2),fwrk(1,3),vx,vy,vz)

      ! interpolate
      call interp_nfld(fpts,fwrk,ndim,pts(1),pts(1+n),pts(2*n+1),
     $                 n,iwk,rwk,INTP_NMAX,.true.,intp_h)

      do i=1,n
         uvw(1,i) = fpts(i)
         uvw(2,i) = fpts(i + n)
         if(if3d) uvw(3,i) = fpts(i + n*2)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine particle_advect_std(x,vh,partv,npart)

c     Lagrangian particle advection

      include 'SIZE'
      include 'TOTAL'

      real x(ldim,LPART),vh(ldim,2:3,LPART),partv(LPART)
      common /scruz/ u1(ldim,LPART)

      common /padvc/ xmx(3,0:2)

      if (istep.eq.0) then      ! AB1
         call rzero(vh,3*ndim*npart) 
         c1 = 1.
         c2 = 0.
         c3 = 0.
      elseif (istep.eq.1) then  ! AB2
         c1 = 3
         c2 = -1.
         c3 = 0
         c1 = c1/2.
         c2 = c2/2.
      else                    ! AB3
         c1 = 23.
         c2 = -16.
         c3 = 5.
         c1 = c1/12.
         c2 = c2/12.
         c3 = c3/12
      endif


      call interp_v(u1,x,npart) 

      do i=1,npart
      do k=1,ndim
C     Update particle position and history
           x(k,i) = x(k,i) 
     $              + dt*(c1*u1(k,i) + c2*vh(k,2,i) + c3*vh(k,3,i))
C     Update particle and fluid velocity history
           vh(k,3,i) = vh(k,2,i)
           vh(k,2,i) = u1(k,i)
      enddo
      enddo

      return
      end
c----------------------------------------------------------------------
      subroutine particle_out (x,partid,partv,npart,ipstep)
      include 'SIZE'
      include 'TOTAL'
      
      real x(ldim,LPART),partv(LPART)
      integer partid(LPART)

      common /scrns/ x_tmp(ldim+1,LPART),work(ldim+1,LPART)

      character*128 fname

      integer icalld
      save    icalld
      data    icalld  /0/

      if (mod(istep,ipstep).ne.0) return

      icalld = icalld+1
      if (nid.eq.0) then
        write(fname,1) icalld
 1      format('part',i5.5,'.3D')
        open(unit=72,file=fname)
      endif

      min_points = iglmin(partid,npart)
      max_points = iglmax(partid,npart)
      n_active   = max_points - min_points + 1
      npass = n_active / LPART
      if (n_active.gt.npass*LPART) npass = npass+1
      ilast=min_points-1

      do ipass=1,npass

        mpart = min(LPART,max_points-ilast)
        i0    = ilast
        i1    = i0 + mpart
        ilast = i1

        call rzero(x_tmp,(ldim+1)*LPART)
        do ii=1,npart
          if (i0.lt.partid(ii).and.partid(ii).le.i1) then
            i = partid(ii)-i0
            call copy(x_tmp(1,i),x(1,ii),ldim)  ! Coordinates
            x_tmp(ldim+1,i) = partv(ii)         ! Store value here
          endif
        enddo

        call gop(x_tmp,work,'+  ',(ldim+1)*LPART)
        if (nid.eq.0) write(72,2)((x_tmp(k,i),k=1,ldim+1),i=1,mpart)
 2      format(1p4e17.9)
        
      enddo

      if (nid.eq.0) close(72)

      return
      end
C-----------------------------------------------------------------------
      subroutine my_particle_generator(ipstep) ! Particle injection
      include 'SIZE'
      include 'TOTAL'
      include 'mpif.h'

      common /rparts/ pts(ldim,LPART),vel(ldim,2:3,LPART),partv(LPART)
      common /iparts/ npart,partid(LPART)
      integer partid

      real ptime           ! Time the particle motion
      save ptime
      data ptime  /0./

      ptime0 = dnekclock_sync()

      call particle_init       (pts,partid,partv,npart,ipstep)
      call particle_advect_std (pts,vel,partv,npart)
      call particle_out        (pts,partid,partv,npart,ipstep)

      ptime1 = dnekclock_sync() ! Track computational cost of particles

      dptime = (ptime1-ptime0)
      ptime  = ptime + dptime

      if (mod(istep,ipstep).eq.0) then
         npmin = iglmin(npart,1)
         npmax = iglmax(npart,1)
         nptot = iglsum(npart,1)
         npmav = nptot/np
         ptpp  = dptime / nptot  ! particle-time per point
         if (nid.eq.0) write(6,1)
     $      istep,npmin,npmav,npmax,nptot,ptpp,dptime,ptime,time
    1       format(4i7,i9,1p4e15.7,' ptime')
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine particle_init(x,partid,partv,npart,ipstep)
c
c     This version does continuous injection and overwrites old entries
c
      include 'SIZE'
      include 'TOTAL'

      real x(ldim,LPART),partv(LPART)
      integer partid(LPART)

      integer lcount,icount
      save    lcount,icount
      data    lcount,icount /0,0/

      if (mod(istep,ipstep).ne.0) return

      lLPART = LPART

      dx = 0.05
      dy = .025
      ds = (1-dy)/100

      k0 = 0
      k  = icount       ! icount = total # particles emitted
      l  = lcount       ! Index into local particle array

      nw = 100

      do iline = 1,4    ! 4 lines at different heights
        xp = -1.0
        zp = .05 + (iline-1)*0.075
        do ipart = 1,nw  ! nw points on a wire

         dy =  0.6*2/(nw-1)
         yp = -0.6 + dy*(ipart-1)

         if (mod(k,np).eq.nid) then ! Inject particle _only_ on this processor
            l=l+1  ! local count
            if (l.gt.lLPART) l=1 ! Retire old particles by overwriting their data
            x(1,l) = xp
            x(2,l) = yp
            x(3,l) = zp
            partid(l) = k+1
c           partv(l) = time  ! A simple coloring scheme
c           partv(l) = k0    ! Another simple coloring scheme
            partv(l) = iline ! color by line
         endif
            
         k = k+1     ! Total count

      enddo

      k0= k0+1    ! Count for this release (for coloring only)

      enddo

      icount = k
      lcount = l
      npart  = max(npart,lcount)

      return
      end
c-----------------------------------------------------------------------
c-----------------------------------------------------------------------
      subroutine vortex_core(l2, vortex) 
c  This routine calculates the vortex core region
c  using one of the following identification methods
c  vortex =
c 'lambda2': Generates Lambda-2 vortex by Jeong & Hussein, JFM '95
c       'q': Generates Q criterion vortex by Hunt, Wray & Moin, CTR-S88 '88
c   'delta': Generates Discriminant (DELTA) criterion vortex by
c            Chong, Perry & Cantwell, Phys. Fluids '90
c'swirling': Generates Swirling Strength (lambda_ci^2) vortex by
c            Zhou, Adrian, Balachandar and Kendall, JFM '99
c
      include 'SIZE'
      include 'TOTAL'
c      character vortex
      real l2(lx1,ly1,lz1,1)
      Character*(*) vortex
c      Character(LEN = LEN(vortex)) vortex
      if (vortex .EQ. "lambda2") then
         call lambda2(l2)
      elseif (vortex .EQ. "q") then
         call compute_q(l2)
      elseif (vortex.EQ. "delta") then
         call compute_delta(l2)
      elseif (vortex.EQ. "swirling") then
         call compute_swirling(l2)
      else
            if(nid.eq.0) write(6,*) 
     &"ABORT:unknown vortex determinant", vortex,
     &". Please use one of: 'lambda2', 'q', 'delta', or 'swirling'"
            call exitt
      endif
         

      return
      end
c---------------------------------------------------------
       subroutine compute_q(l2)
c
c     Generate Q criterion vortex by Hunt, Wray & Moin, CTR-S88 1988
c     positive second invariant of velocity gradient tensor
c
      include 'SIZE'
      include 'TOTAL'
      parameter (lt=lx1*ly1*lz1*lelt)
      parameter (lxyz=lx1*ly1*lz1)
      real l2(lx1,ly1,lz1,1)
      real mygi(lxyz,ldim,ldim)
      real P1,Q1
      common /mygrad/ mygi

      nxyz = lx1*ly1*lz1
      n    = nxyz*nelv

      do ie=1,nelv
         ! Compute velocity gradient tensor
         call comp_gije(mygi,vx(1,1,1,ie),vy(1,1,1,ie),vz(1,1,1,ie),ie)
         do l=1,nxyz
            !call compute_firstInv(P1,l)
            !P1=-P1 !negative sign
            call compute_secondInv(Q1,l)         
            l2(l,1,1,ie) = Q1
         enddo
      enddo

      ! smooth field
      wght = 0.5 
      ncut = 1
      call filter_s0(l2,wght,ncut,'vortx') 

      return
      end
cc---------------------------------------------------------
      subroutine compute_delta(l2)
c
c     Generate  Discriminant (DELTA) criterion vortex by 
c         Chong, Perry & Cantwell, Phys. Fluids 1990
c     complex eigenvalues of velocity gradient tensor
c
      include 'SIZE'
      include 'TOTAL'
      parameter (lt=lx1*ly1*lz1*lelt)
      parameter (lxyz=lx1*ly1*lz1)
      real l2(lx1,ly1,lz1,1)
      real mygi(lxyz,ldim,ldim)
      real P1,Q1,R1,Q,R,Delta
      common /mygrad/ mygi

      nxyz = lx1*ly1*lz1
      n    = nxyz*nelv

      do ie=1,nelv
         ! Compute velocity gradient tensor
         call comp_gije(mygi,vx(1,1,1,ie),vy(1,1,1,ie),vz(1,1,1,ie),ie)
         do l=1,nxyz
            call compute_firstInv(P1,l)
            P1=-P1 !negative sign
            call compute_secondInv(Q1,l) 
            call compute_thirdInv(R1,l)
            R1=-R1 !negative sign
            Q=Q1-(P1**2)/3
            R=R1+(P1**3)*2/27-P1*Q1/3
            Delta = (R/2)**2+(Q/3)**3          
            l2(l,1,1,ie) = Delta
         enddo
      enddo

      ! smooth field
      wght = 0.5 
      ncut = 1
      call filter_s0(l2,wght,ncut,'vortx') 

      return
      end
c---------------------------------------------------------
       subroutine compute_swirling(l2)
c
c     Generate Swirling Strength criterion vortex by 
c     Zhou, Adrian, Balachandar and Kendall, JFM 1999
c
c     imaginary part of complex eigenvalues of velocity gradient tensor
c                   presented as lambda_ci^2 
c
c   for the 3x3 case
c                |d11, d12, d13|  |du/dx,du/dy,du/dz|
c   D = [d_ij] = |d21, d22, d23|= |dv/dx,dv/dy,dv/dz|
c                |d31, d32, d33|  |dw/dx,dw/dy,dw/dz|
c
c                       |lambda_r,  0,       0      |
c   [d_ij]= [vr,vcr,vci]|  0,   lambda_cr, lambda_ci|[vr,vcr,vci]^-1
c                       |  0,  -lambda_ci, lambda_cr| 
c
c    λ^3+P*λ^2+Qλ+R=0
c    
c   where P = -I_D   = -tr(D)
c         Q = II_D  =  0.5[P*P - tr(DD)]
c         R = -III_D = 1/3.[-P+3QP-tr(DDD)]
c   for the 2x2 case
c
c   λ^2+Qλ+R=0
c
c   where Q = II_D  =  0.5[P*P - tr(DD)]
c         R = -III_D = 1/3.[-P+3QP-tr(DDD)]    
c
c
      include 'SIZE'
      include 'TOTAL'
      parameter (lt=lx1*ly1*lz1*lelt)
      parameter (lxyz=lx1*ly1*lz1)
      real l2(lx1,ly1,lz1,1)
      real gije(lxyz,ldim,ldim),mygi(lxyz,ldim,ldim)
      real P1,Q1,R1,Q,R,Delta,a1,a2,lambdaCi
      common /mygrad/ mygi

      nxyz = lx1*ly1*lz1
      n    = nxyz*nelv
      if (if3d) then     ! 3D CASE
         do ie=1,nelv
         ! Compute velocity gradient tensor
        call comp_gije(mygi,vx(1,1,1,ie),vy(1,1,1,ie),vz(1,1,1,ie),ie)
           do l=1,nxyz
              call compute_firstInv(P1,l)
              P1=-P1 !negative sign
              call compute_secondInv(Q1,l) 
              call compute_thirdInv(R1,l)
              R1=-R1 !negative sign
              !Q=Q1-(P1**2)/3
              R=R1+(P1**3)*2/27-P1*Q1/3
              !Delta = (R/2)**2+(Q/3)**3          
              call  cubicLambdaCi(P1, Q1, R1, lambdaCi)
			
	      l2(l,1,1,ie) =lambdaCi
           enddo
        enddo
      elseif (ifaxis) then   ! AXISYMMETRIC CASE
            if(nid.eq.0) write(6,*) 
     &      'ABORT:no compute_swirling axialsymmetric support for now'
            call exitt
       else              ! 2D CASE
         do ie=1,nelv
         ! Compute velocity gradient tensor
        call comp_gije(mygi,vx(1,1,1,ie),vy(1,1,1,ie),vz(1,1,1,ie),ie)
           do l=1,nxyz
              call compute_firstInv(P1,l)
              P1=-P1 !negative sign
              !call compute_secondInv(Q1,l) 
              !Q1=0.
              call compute_thirdInv(R1,l)
              R1=-R1 !negative sign
              !Q=Q1-(P1**2)/3
              !R=R1+(P1**3)*2/27-P1*Q1/3
              !Delta = (R/2)**2+(Q/3)**3          
              call  quadLambdaCi(P1, R1, lambdaCi)

			
	      l2(l,1,1,ie) =lambdaCi
           enddo
        enddo

      endif
     
	        ! smooth field
       wght = 0.5 
       ncut = 1
       call filter_s0(l2,wght,ncut,'vortx') 
	  
      do ie=1,nelv
        do l=1,nxyz
	        l2(l,1,1,ie) =  l2(l,1,1,ie)*l2(l,1,1,ie)  
        enddo
      enddo



      return
      end
c---------------------------------------------------------
       subroutine compute_firstInv(a, l)
c
c   for the 3x3 case
c                |d11, d12, d13|
c   D = [d_ij] = |d21, d22, d23|
c                |d31, d32, d33|
c
c   compute_firstInv returns tr(d_ij)
c                      = (d11+d22+d33)
c
       include 'SIZE'
       include 'TOTAL'
       parameter (lxyz=lx1*ly1*lz1)
       real mygi(lxyz,ldim,ldim)
       real a
       integer l
       common /mygrad/ mygi
       if (if3d) then     ! 3D CASE
          a=(mygi(l,1,1)+mygi(l,2,2)+mygi(l,3,3))
       elseif (ifaxis) then   ! AXISYMMETRIC CASE
            if(nid.eq.0) write(6,*) 
     &        'ABORT: compute_firstInv axialsymmetric support for now'
            call exitt
       else              ! 2D CASE
            a=(mygi(l,1,1)+mygi(l,2,2))

      endif 
       return 
       end
c-------------------------------------------------------------------
       subroutine compute_secondInv(a, l)
c
c   for the 3x3 case
c                |d11, d12, d13|
c   D = [d_ij] = |d21, d22, d23|
c                |d31, d32, d33|
c
c   compute_SecondInv returns 0.5*(tr(d_ij)^2+tr(d_ij*d_ij))
c     =-(d22*d33-d23*d32)-(d11*d22-d12*d21)-(d33*d11-d13*d31)
c
       include 'SIZE'
       include 'TOTAL'
       parameter (lxyz=lx1*ly1*lz1)
       real mygi(lxyz,ldim,ldim)
       real a
       integer l
       common /mygrad/ mygi
       if (if3d) then     ! 3D CASE
       a=(mygi(l,2,2)*mygi(l,3,3)-mygi(l,2,3)*mygi(l,3,2))
     &         +(mygi(l,1,1)*mygi(l,2,2)-mygi(l,1,2)*mygi(l,2,1))
     &         +(mygi(l,3,3)*mygi(l,1,1)-mygi(l,1,3)*mygi(l,3,1))
       elseif (ifaxis) then   ! AXISYMMETRIC CASE
            if(nid.eq.0) write(6,*) 
     &        'ABORT: compute_secondInv axialsymmetric support for now'
            call exitt
       else              ! 2D CASE
            a=(mygi(l,1,1)+mygi(l,2,2))*(mygi(l,1,1)+mygi(l,2,2))
     &        -2*mygi(l,1,2)*mygi(l,2,1)-mygi(l,1,1)*mygi(l,1,1)
     &        -mygi(l,2,2)*mygi(l,2,2)

      endif 

       return 
       end
c-------------------------------------------------------------------
       subroutine compute_thirdInv(a, l)
c
c   for the 3x3 case
c                |d11, d12, d13|
c   D = [d_ij] = |d21, d22, d23|
c                |d31, d32, d33|
c
c    compute_thirdInv returns det(D)
c    =-d11*(d23*d32-d22*d33)-d12*(d21*d33-d31*d23)-d13*(d31*d22-d21*d32)
c
       include 'SIZE'
       include 'TOTAL'
       parameter (lxyz=lx1*ly1*lz1)
       real mygi(lxyz,ldim,ldim)
       real a
       integer l
       common /mygrad/ mygi
       if (if3d) then     ! 3D CASE
       a=-mygi(l,1,1)*(mygi(l,2,3)*mygi(l,3,2)
     &         -mygi(l,2,2)*mygi(l,3,3))
     &         -mygi(l,1,2)*(mygi(l,2,1)*mygi(l,3,3)
     &         -mygi(l,3,1)*mygi(l,2,3))
     &         -mygi(l,1,3)*(mygi(l,3,1)*mygi(l,2,2)
     &         -mygi(l,2,1)*mygi(l,3,2))
       elseif (ifaxis) then   ! AXISYMMETRIC CASE
            if(nid.eq.0) write(6,*) 
     &        'ABORT: compute_thirdInv axialsymmetric support for now'
            call exitt
       else              ! 2D CASE
            a=mygi(l,1,1)*mygi(l,2,2)-mygi(l,1,2)*mygi(l,2,1)

      endif 
       return 
       end
c-------------------------------------------------------------------
      subroutine cubicLambdaCi(b, c, d, lci)
      include 'SIZE'
      include 'TOTAL'
      parameter (lxyz=lx1*ly1*lz1)
      real mygi(lxyz,ldim,ldim)
      real b,c,d
	  real f,g,h,r,s,t2,u
      real lci	  
      complex ci
      complex x1

      ci =sqrt(cmplx(-1.))

      a = 1
      f = c/a - 1/3.*(b/a)**2.
      g = ((2.*(b**3.)/(a**3.))-(9.*b*c/(a**2.))+(27.*d/a))/27.
      h = (g/2.)**2.+(f/3.)**3. 
	  
      if (h .LE. 0.) then
          lci = 0.
      else
          r = -(g/2.) + sqrt(h)
          if (r .le. 0.) then
              s = sign(abs(r)**(1.0/3.0), r)
          else
              s = (r)**(1./3.)
          endif
          t2 = -(g/2.) - sqrt(h)
          if (t2 .le. 0.) then 
              u = sign(abs(t2)**(1.0/3.0), t2)
         else
              u = ((t2)**(1/3.))
         endif
         x1 = -(s+u)/2.+ (b/3./a)+ci*(s-u)*sqrt(3.)/2.
         lci = aimag(x1)
      endif
    
      end 
c-------------------------------------------------------------------
      subroutine quadLambdaCi(b, c, lci)
      include 'SIZE'
      include 'TOTAL'
      parameter (lxyz=lx1*ly1*lz1)
      real mygi(lxyz,ldim,ldim)
      real b,c
      real  f
      real lci	  
      complex ci
      complex x1

      ci =sqrt(cmplx(-1.))

      a = 1
      d = b**2.-4.*a*c
	  
      if (d .GE. 0.) then
          lci = 0.
      else
          f = sqrt(abs(d))!sign(abs(d)**(1.0/2.0), d)
          x1 = -b/2./a+f*ci/2./a     
         lci = aimag(x1)
      endif
    
      end 
c-------------------------------------------------------------------
      subroutine LambdaCi2D(lci)
      include 'SIZE'
      include 'TOTAL'
      parameter (lxyz=lx1*ly1*lz1)
      real mygi(lxyz,ldim,ldim)
      real d
      real lci	  
      complex ci
      complex x1
      common /mygrad/ mygi
      ci =sqrt(cmplx(-1.))


      
      d = (mygi(l,1,2)-mygi(l,2,1))**2-4*mygi(l,1,2)*mygi(l,2,1)

      if (d .GE. 0.) then
         lci = 0.
      else
         lci = sqrt(abs(d))/2.
      endif

      end 
c-------------------------------------------------------------------
